package it.unisannio.srss.ame.payloads.common;

import it.unisannio.srss.ame.payloads.common.OutputLocation.RelativeToType;

import java.io.InputStream;
import java.util.HashSet;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;

import android.util.Log;

public class PayloadConfig {

	final static String CONFIG_FILE = "payload.properties";
	private final static String TAG = PayloadConfig.class.getSimpleName();

	final static String NAME_PROPERTY = "name";
	private String name;

	final static String DESCRIPTION_PROPERTY = "description";
	private String description;

	final static String PERMISSIONS_PROPERTY = "permissions";
	private Set<String> permissions;

	final static String PRODUCES_OUTPUT_PROPERTY = "produces_output";
	private boolean producesOutput;

	private OutputLocation outputLocation;

	public PayloadConfig() {
		name = null;
		description = null;
		permissions = new HashSet<String>();
		outputLocation = null;
	}

	public String getName() {
		return name;
	}

	public String getDescription() {
		return description;
	}

	public Set<String> getPermissions() {
		return permissions;
	}

	public OutputLocation getOutputLocation() {
		return outputLocation;
	}

	public boolean isProducesOutput() {
		return producesOutput;
	}

	public static PayloadConfig loadFromProperties(Class<?> payloadClass) {
		Properties p = new Properties();
		InputStream in = payloadClass.getResourceAsStream(CONFIG_FILE);
		if (in == null) {
			Log.e(TAG, "Could not find " + CONFIG_FILE + " in package "
					+ payloadClass.getPackage().getName());
			return null;
		}
		try {
			p.load(in);
		} catch (Exception e) {
			Log.e(TAG, "Error while reading " + CONFIG_FILE + " in package "
					+ payloadClass.getPackage().getName());
			if (in != null)
				try {
					in.close();
				} catch (Exception e1) {
				}
			return null;
		}
		if (in != null)
			try {
				in.close();
			} catch (Exception e1) {
			}
		PayloadConfig c = new PayloadConfig();
		c.name = p.getProperty(NAME_PROPERTY);
		if (c.name == null || c.name.length() == 0) {
			Log.e(TAG, NAME_PROPERTY + " property missing in " + CONFIG_FILE
					+ " in package " + payloadClass.getPackage().getName());
			return null;
		}
		c.description = p.getProperty(DESCRIPTION_PROPERTY);
		String permissions = p.getProperty(PERMISSIONS_PROPERTY);
		if (permissions != null && permissions.length() > 0) {
			StringTokenizer st = new StringTokenizer(permissions, ",");
			while (st.hasMoreTokens())
				c.permissions.add(st.nextToken().trim());
		}
		c.producesOutput = Boolean.parseBoolean(p
				.getProperty(PRODUCES_OUTPUT_PROPERTY));
		if (c.producesOutput) {
			OutputLocation ol = new OutputLocation();
			try {
				ol.setRelativeTo(RelativeToType.valueOf(p
						.getProperty(OutputLocation.RELATIVE_TO_TYPE_PROPERTY)));
			} catch (Exception e) {
				Log.e(TAG, OutputLocation.RELATIVE_TO_TYPE_PROPERTY
						+ " property missing or malformed in " + CONFIG_FILE
						+ " in package " + payloadClass.getPackage().getName());
				return null;
			}
			ol.setFilename(p.getProperty(OutputLocation.FILENAME_PROPERTY));
			if (ol.getFilename() == null || ol.getFilename().length() == 0) {
				Log.e(TAG, OutputLocation.FILENAME_PROPERTY
						+ " property missing in " + CONFIG_FILE
						+ " in package " + payloadClass.getPackage().getName());
				return null;
			}

			c.outputLocation = ol;
		}
		return c;
	}
}
