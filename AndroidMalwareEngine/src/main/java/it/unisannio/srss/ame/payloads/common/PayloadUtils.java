package it.unisannio.srss.ame.payloads.common;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;

public final class PayloadUtils {

	public enum PrintResult {
		/**
		 * Il file già esiste e non è possibile sovrascriverlo
		 */
		FAIL_FILE_EXISTS_AND_NOT_WRITEABLE,
		/**
		 * Non è possibile scrivere nella posizione data
		 */
		FAIL_CANNOT_WRITE, FAIL_CANNOT_CREATE_FILE,
		/**
		 * Non è possibile creare la struttura delle directory
		 */
		FAIL_CREATE_DIRECTORY,
		/**
		 * Errore durante il parsing del file di configurazione
		 */
		FAIL_CANNOT_READ_CONFIGURATION,
		/**
		 * La configurazione del payload non prevede output
		 */
		FAIL_NO_OUTPUT_EXPECTED,
		/**
		 * Scrittura avvenuta con successo.
		 */
		SUCCESS
	}

	/**
	 * Scrive la data stringa sul file specificato nel file di configurazione
	 * {@link PayloadConfig#CONFIG_FILE} che si trova nel package della classe
	 * data.
	 * 
	 * @param clazz
	 *            La classe del payload
	 * @param toPrint
	 * @return
	 */
	public static <T> PrintResult printToFile(Class<T> clazz, String toPrint) {
		PayloadConfig c = PayloadConfig.loadFromProperties(clazz);
		if (c == null)
			return PrintResult.FAIL_CANNOT_READ_CONFIGURATION;
		if (!c.isProducesOutput())
			return PrintResult.FAIL_NO_OUTPUT_EXPECTED;
		c.getOutputLocation().setAppFilesPath(
				PayloadRunner.getInstance().getApplicationContext()
						.getFilesDir().getAbsolutePath());
		String filename = c.getOutputLocation().getFilePath();
		File f = new File(filename);
		return printToFile(f, toPrint);
	}

	public static PrintResult printToFile(File f, String toPrint) {
		if (f.canWrite() && f.isFile()) {
			if (!f.delete())
				return PrintResult.FAIL_FILE_EXISTS_AND_NOT_WRITEABLE;
		} else if (f.exists() && !f.canWrite())
			return PrintResult.FAIL_CANNOT_WRITE;
		else if (!f.exists() || f.isDirectory()) {
			File parent = f.getParentFile();
			if (parent != null) {
				if (!parent.isDirectory())
					if (!parent.mkdirs())
						return PrintResult.FAIL_CREATE_DIRECTORY;
				if (!parent.canWrite())
					return PrintResult.FAIL_CANNOT_WRITE;
			}
		}
		PrintResult res = PrintResult.SUCCESS;
		PrintStream ps = null;
		try {
			ps = new PrintStream(f);
			ps.print(toPrint);
		} catch (FileNotFoundException e) {
			res = PrintResult.FAIL_CANNOT_CREATE_FILE;
		} finally {
			if (ps != null)
				ps.close();
		}
		return res;
	}
}
