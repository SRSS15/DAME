package it.unisannio.srss.ame.payloads.common;

import java.io.File;

import android.os.Environment;

public class OutputLocation {

	public enum RelativeToType {
		/**
		 * Tipo più ampio, il file può essere salvato dovunque ma potrebbe
		 * richiedere i privilegi di amministratori
		 */
		ROOT,
		/**
		 * Scrive nella memoria di default in cui tutte le app possono scrivere.<br>
		 * Richiede il permesso
		 * <code>android.permission.WRITE_EXTERNAL_STORAGE</code>
		 */
		STORAGE,
		/**
		 * Scrive nello spazio dedicato all'app in esecuzione.<br>
		 * Non richiede alcun permesso.
		 */
		APP_FILES
	}

	final static String RELATIVE_TO_TYPE_PROPERTY = "output.location.relative_to";
	private RelativeToType relativeTo;
	final static String FILENAME_PROPERTY = "output.location.filename";
	private String filename;
	private String appFilesPath;

	public OutputLocation() {
		relativeTo = RelativeToType.APP_FILES;
		filename = null;
		appFilesPath = null;
	}

	public RelativeToType getRelativeTo() {
		return relativeTo;
	}

	/* default */void setRelativeTo(RelativeToType relativeTo) {
		this.relativeTo = relativeTo;
	}

	public String getFilename() {
		return filename;
	}

	/* default */void setFilename(String filename) {
		this.filename = filename;
	}

	/* default */String getAppFilesPath() {
		return appFilesPath;
	}

	/* default */void setAppFilesPath(String appFilesPath) {
		this.appFilesPath = appFilesPath;
	}

	public String getFilePath() {
		String prefix = null;
		switch (relativeTo) {
		case ROOT:
			prefix = File.separator;
			break;
		case STORAGE:
			prefix = Environment.getExternalStorageDirectory()
					.getAbsolutePath();
			break;
		case APP_FILES:
			// Bisogna settare il path dell'area dei dati dell'app prima di
			// utilizzare questo metodo. Questo può essere fatto solo se si ha
			// accesso al contesto.
			if (appFilesPath == null)
				throw new RuntimeException("App files path not set!");
			prefix = appFilesPath;
		}
		// si fa in modo che il prefisso termini con "/"
		if (!prefix.endsWith(File.separator))
			prefix = prefix + File.separator;
		return prefix
				+ (filename.startsWith(File.separator) ? filename.substring(1)
						: filename);
	}
}
