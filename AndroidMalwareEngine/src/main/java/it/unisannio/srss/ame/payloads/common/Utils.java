package it.unisannio.srss.ame.payloads.common;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.net.URL;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

import android.util.Xml;

public final class Utils {

	public static Config readFromXML(URL url) {
		Config res = new Config();
		InputStream in = null;
		try {
			in = url.openStream();
			XmlPullParser parser = Xml.newPullParser();
			parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, false);
			parser.setInput(in, null);
			parser.nextTag();
			readPermissions(parser, res);
			readFileName(parser, res);
		} catch (Exception e) {
			res = null;
		} finally {
			if (in != null)
				try {
					in.close();
				} catch (IOException e) {
				}
		}
		return res;
	}

	private static void readPermissions(XmlPullParser parser, Config c)
			throws XmlPullParserException, IOException {
		parser.require(XmlPullParser.START_TAG, null, "permissions");
		while (parser.next() != XmlPullParser.END_TAG) {
			if (parser.getEventType() != XmlPullParser.START_TAG) {
				continue;
			}
			String name = parser.getName();
			if (name.equals("permission")) {
				parser.require(XmlPullParser.START_TAG, null, name);
				String permission = readText(parser);
				parser.require(XmlPullParser.END_TAG, null, name);
				c.addPermission(permission);
			} else {
				skip(parser);
			}
		}
		parser.require(XmlPullParser.END_TAG, null, "permissions");
	}

	private static void readFileName(XmlPullParser parser, Config c)
			throws XmlPullParserException, IOException {
		parser.next();
		String name = parser.getName();
		if (name.equals("save-to")) {
			parser.require(XmlPullParser.START_TAG, null, "save-to");
			String filename = readText(parser);
			parser.require(XmlPullParser.END_TAG, null, "save-to");
			c.setFilename(filename);
		}else{
			skip(parser);
		}
	}

	private static String readText(XmlPullParser parser) throws IOException,
			XmlPullParserException {
		String result = "";
		if (parser.next() == XmlPullParser.TEXT) {
			result = parser.getText();
			parser.nextTag();
		}
		return result;
	}

	private static void skip(XmlPullParser parser)
			throws XmlPullParserException, IOException {
		if (parser.getEventType() != XmlPullParser.START_TAG) {
			throw new IllegalStateException();
		}
		int depth = 1;
		while (depth != 0) {
			switch (parser.next()) {
			case XmlPullParser.END_TAG:
				depth--;
				break;
			case XmlPullParser.START_TAG:
				depth++;
				break;
			}
		}
	}

	public enum PrintResult {
		/**
		 * Il file già esiste e non è possibile sovrascriverlo
		 */
		FAIL_FILE_EXISTS_AND_NOT_WRITEABLE,
		/**
		 * Non è possibile scrivere nella posizione data
		 */
		FAIL_CANNOT_WRITE, FAIL_CANNOT_CREATE_FILE,
		/**
		 * Non è possibile creare la struttura delle directory
		 */
		FAIL_CREATE_DIRECTORY,
		/**
		 * Errore durante il parsing del file di configurazione
		 */
		FAIL_CANNOT_READ_CONFIGURATION,
		/**
		 * Scrittura avvenuta con successo.
		 */
		SUCCESS;
	}

	/**
	 * Scrive la data stringa sul file specificato nel file di configurazione
	 * "Config.xml" che si trova nel package della classe data.
	 * 
	 * @param clazz
	 * @param toPrint
	 * @return
	 */
	public static <T> PrintResult printToFile(Class<T> clazz, String toPrint) {
		Config c = Utils.readFromXML(clazz.getResource("Config.xml"));
		if (c == null)
			return PrintResult.FAIL_CANNOT_READ_CONFIGURATION;
		File f = new File(c.getFilename());
		return printToFile(f, toPrint);
	}

	public static PrintResult printToFile(File f, String toPrint) {
		if (f.canWrite() && f.isFile()) {
			if (!f.delete())
				return PrintResult.FAIL_FILE_EXISTS_AND_NOT_WRITEABLE;
		} else if (f.exists() && !f.canWrite())
			return PrintResult.FAIL_CANNOT_WRITE;
		else if (!f.exists() || f.isDirectory()) {
			File parent = f.getParentFile();
			if (parent != null) {
				if (!parent.isDirectory())
					if (!parent.mkdirs())
						return PrintResult.FAIL_CREATE_DIRECTORY;
				if (!parent.canWrite())
					return PrintResult.FAIL_CANNOT_WRITE;
			}
		}
		PrintResult res = PrintResult.SUCCESS;
		PrintStream ps = null;
		try {
			ps = new PrintStream(f);
			ps.print(toPrint);
		} catch (FileNotFoundException e) {
			res = PrintResult.FAIL_CANNOT_CREATE_FILE;
		} finally {
			if (ps != null)
				ps.close();
		}
		return res;
	}
}
