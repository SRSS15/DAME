package it.unisannio.srss.ame.payloads.common;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import android.os.Environment;

public final class Utils {

	public enum PrintResult {
		/**
		 * Il file già esiste e non è possibile sovrascriverlo
		 */
		FAIL_FILE_EXISTS_AND_NOT_WRITEABLE,
		/**
		 * Non è possibile scrivere nella posizione data
		 */
		FAIL_CANNOT_WRITE, FAIL_CANNOT_CREATE_FILE,
		/**
		 * Non è possibile creare la struttura delle directory
		 */
		FAIL_CREATE_DIRECTORY,
		/**
		 * Errore durante il parsing del file di configurazione
		 */
		FAIL_CANNOT_READ_CONFIGURATION,
		/**
		 * Scrittura avvenuta con successo.
		 */
		SUCCESS;
	}

	/**
	 * Scrive la data stringa sul file specificato nel file di configurazione
	 * "Config.xml" che si trova nel package della classe data.
	 * 
	 * @param clazz
	 * @param toPrint
	 * @return
	 */
	public static <T> PrintResult printToFile(Class<T> clazz, String toPrint) {
		Config c = Config.readFromProperties(clazz);
		if (c == null)
			return PrintResult.FAIL_CANNOT_READ_CONFIGURATION;
		String filename = c.getFileLocation().getFilename();
		if (c.getFileLocation().isRelativeToSdcard()) {
			filename = Environment.getExternalStorageDirectory()
					+ File.separator
					+ (filename.startsWith(File.separator) ? filename
							.substring(1) : filename);
		}
		File f = new File(filename);
		return printToFile(f, toPrint);
	}

	public static PrintResult printToFile(File f, String toPrint) {
		if (f.canWrite() && f.isFile()) {
			if (!f.delete())
				return PrintResult.FAIL_FILE_EXISTS_AND_NOT_WRITEABLE;
		} else if (f.exists() && !f.canWrite())
			return PrintResult.FAIL_CANNOT_WRITE;
		else if (!f.exists() || f.isDirectory()) {
			File parent = f.getParentFile();
			if (parent != null) {
				if (!parent.isDirectory())
					if (!parent.mkdirs())
						return PrintResult.FAIL_CREATE_DIRECTORY;
				if (!parent.canWrite())
					return PrintResult.FAIL_CANNOT_WRITE;
			}
		}
		PrintResult res = PrintResult.SUCCESS;
		PrintStream ps = null;
		try {
			ps = new PrintStream(f);
			ps.print(toPrint);
		} catch (FileNotFoundException e) {
			res = PrintResult.FAIL_CANNOT_CREATE_FILE;
		} finally {
			if (ps != null)
				ps.close();
		}
		return res;
	}

	public static void updateManifest(File manifest, List<String> permissions)
			throws ParserConfigurationException, SAXException, IOException,
			TransformerException {
		Set<String> permissionsCopy = new HashSet<String>(permissions.size());
		for (String s : permissions)
			permissionsCopy.add(s);
		DocumentBuilderFactory docFactory = DocumentBuilderFactory
				.newInstance();
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
		Document doc = docBuilder.parse(manifest);

		NodeList nodes = doc.getElementsByTagName("uses-permission");
		for (int i = 0; i < nodes.getLength(); i++) {
			Element e = (Element) nodes.item(i);
			String permission = e.getAttribute("android:name");
			permissionsCopy.remove(permission);
		}
		Element manifestElement = (Element) doc
				.getElementsByTagName("manifest").item(0);
		for (String s : permissionsCopy) {
			Element e = doc.createElement("uses-permission");
			e.setAttribute("android:name", s);
			manifestElement.appendChild(e);
		}
		DOMSource source = new DOMSource(doc);
		TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer = transformerFactory.newTransformer();
		StreamResult result = new StreamResult(manifest);
		transformer.transform(source, result);
	}
}
