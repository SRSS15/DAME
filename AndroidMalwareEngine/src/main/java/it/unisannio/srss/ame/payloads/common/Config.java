package it.unisannio.srss.ame.payloads.common;

import java.io.IOException;
import java.io.InputStream;
import java.util.HashSet;
import java.util.Properties;
import java.util.Set;
import java.util.StringTokenizer;

public class Config {

	private final static String CONFIG_FILE = "payload.properties";

	private Set<String> permissions;

	private FileLocation fileLocation;

	public Config() {
		permissions = new HashSet<String>();
	}

	public Set<String> getPermissions() {
		return permissions;
	}

	void setPermissions(Set<String> permissions) {
		this.permissions = permissions;
	}

	public FileLocation getFileLocation() {
		return fileLocation;
	}

	private void setFileLocation(FileLocation filename) {
		this.fileLocation = filename;
	}

	private void addPermission(String permission) {
		permissions.add(permission);
	}

	public static Config readFromProperties(Class<?> payloadClass) {
		Properties p = new Properties();
		InputStream in = payloadClass.getResourceAsStream(CONFIG_FILE);
		if (in == null)
			return null;
		try {
			p.load(in);
		} catch (IOException e) {
			return null;
		}
		Config c = new Config();
		// TODO fare controlli su esistenza delle chiavi
		StringTokenizer st = new StringTokenizer(p.getProperty("permissions"),
				",");
		while (st.hasMoreTokens())
			c.addPermission(st.nextToken().trim());
		FileLocation fl = new FileLocation();
		fl.setRelativeToSdcard(Boolean.parseBoolean(p
				.getProperty("file.location.relative_to_sdcard")));
		fl.setFilename(p.getProperty("file.location.path"));
		c.setFileLocation(fl);
		return c;
	}
}
