          _____                    _____                    _____                    _____          
         /\    \                  /\    \                  /\    \                  /\    \         
        /::\    \                /::\    \                /::\____\                /::\    \        
       /::::\    \              /::::\    \              /::::|   |               /::::\    \       
      /::::::\    \            /::::::\    \            /:::::|   |              /::::::\    \      
     /:::/\:::\    \          /:::/\:::\    \          /::::::|   |             /:::/\:::\    \     
    /:::/  \:::\    \        /:::/__\:::\    \        /:::/|::|   |            /:::/__\:::\    \    
   /:::/    \:::\    \      /::::\   \:::\    \      /:::/ |::|   |           /::::\   \:::\    \   
  /:::/    / \:::\    \    /::::::\   \:::\    \    /:::/  |::|___|______    /::::::\   \:::\    \  
 /:::/    /   \:::\ ___\  /:::/\:::\   \:::\    \  /:::/   |::::::::\    \  /:::/\:::\   \:::\    \ 
/:::/____/     \:::|    |/:::/  \:::\   \:::\____\/:::/    |:::::::::\____\/:::/__\:::\   \:::\____\
\:::\    \     /:::|____|\::/    \:::\  /:::/    /\::/    / ~~~~~/:::/    /\:::\   \:::\   \::/    /
 \:::\    \   /:::/    /  \/____/ \:::\/:::/    /  \/____/      /:::/    /  \:::\   \:::\   \/____/ 
  \:::\    \ /:::/    /            \::::::/    /               /:::/    /    \:::\   \:::\    \     
   \:::\    /:::/    /              \::::/    /               /:::/    /      \:::\   \:::\____\    
    \:::\  /:::/    /               /:::/    /               /:::/    /        \:::\   \::/    /    
     \:::\/:::/    /               /:::/    /               /:::/    /          \:::\   \/____/     
      \::::::/    /               /:::/    /               /:::/    /            \:::\    \         
       \::::/    /               /:::/    /               /:::/    /              \:::\____\        
        \::/____/                \::/    /                \::/    /                \::/    /        
         ~~                       \/____/                  \/____/                  \/____/         
                                                                                                    

                               DAME - Dynamic Android Malware Engine
                                 UniversitÃ  degli Studi del Sannio
                             Sicurezza delle Reti e dei Sistemi Software
                             			   A.A. 2014-2015
                             			   
I. AUTORI

	* Danilo Cianciulli
	* Ermanno Francesco Sannini
	* Roberto Falzarano

II. LICENZA

	// TODO

III. CHANGE HISTORY

	* 1.0.0-RELEASE 	2015-02-17

IV. CONTENUTO

	1. INTRODUZIONE
	2. PREREQUISITI
		2.1 PREREQUISITI DI UTILIZZO
		2.2 PREREQUISITI DI SVILUPPO
	3. UTILIZZO
		3.1 OPZIONI
		3.2 CONFIGURAZIONE SERVER FTP
		3.3 PAYLOADS
		3.4 OUTPUT
	4. SVILUPPO
		4.1 SCRITTURA PAYLOAD
		4.2 GENERAZIONE BINARI
	5. SVILUPPI FUTURI
	
1. INTRODUZIONE

// TODO
Scrivere una introduzione su cosa Ã¨ DAME e su cosa lo caratterizza

2. PREREQUISITI

In questa sezione sono elencati i prerequisiti di DAME che si differenziano a seconda se
si intente sviluppare o solo utilizzare.

2.1 PREREQUISITI DI UTILIZZO

Prima di procedere all'utilizzo di DAME bisogna assicurarsi di aver installato tutti i
sequenti pacchetti software sulla propria macchina:
	* Java SE JRE (>= 1.7)	--> http://www.oracle.com/technetwork/java/javase/downloads/index.html
	* Android SDK Tools 	--> http://developer.android.com/sdk/index.html
	* Androguard 			--> https://code.google.com/p/androguard/
	* Python (>= 2.7.6)		--> https://www.python.org/downloads/

In alternativa Ã¨ possibile eseguire DAME nella virtual machine A.R.E
(Android Reverse Engineering) scaricabile da https://redmine.honeynet.org/projects/are/wiki
A.R.E. ha perÃ² software obsoleto, per cui, se si decidesse di utilizzarlo,
Ã¨ fondamentale procedere all'aggiornamento di Java, Android SDK Tools e Python alle ultime
versioni disponibili.

Se non si Ã¨ interessati allo sviluppo, Ã¨ possibile saltare direttamente alla sezione 3.

2.2 PREREQUISITI DI SVILUPPO

Prima di procedere nello sviluppo di DAME bisogna assicurarsi di aver installato tutti i
seguenti pacchetti software sulla macchina:
	* Java SE JDK (>= 1.7) 	--> http://www.oracle.com/technetwork/java/javase/downloads/index.html
	* Android SDK Tools 	--> http://developer.android.com/sdk/index.html
	* Androguard 			--> https://code.google.com/p/androguard/
	* Ant (>= 1.9.3)		--> http://ant.apache.org/
	* Maven (>= 3.2.3)		--> http://maven.apache.org/
	* Python (>= 2.7.6)		--> https://www.python.org/downloads/

Come per l'utilizzo, anche lo sviluppo puÃ² essere effettuato nella virtual machine A.R.E.
Ãˆ fondamentale perÃ² procedere all'aggiornamento dei pacchetti Java, Android SDK Tools, Ant,
Maven e Python alle ultime versioni disponibili.

Prima di procedere con lo sviluppo Ã¨ necessario inoltre seguire la seguente procedura per
l'istallazione dell'API 19 di Android nel proprio repository locale Maven.
	1. Aggiornare il proprio SDK Android e installare la versione 21.1.2 dei build tools,
	   e la versione 19 dell'API di Android.
	2. Annotare la posizione del file android.jar relativo alla versione 19 dell'API, ad
	   esempio /opt/android-sdk/platforms/android-19/android.jar.
	3. Da terminale eseguire il comando:
		$ mvn install:install-file -Dfile=<android-jar> -DgroupId=com.google.android
				-DartifactId=android -Dversion=19 -Dpackaging=jar -DgeneratePom=true
	   Sostituendo <android-jar> con il percorso annotato al punto 2.

AffinchÃ© gli script Ant funzionino correttamente, Ã¨ necessario inoltre aggiornare il file
local.properties affinchÃ© sia adattato al proprio environment.
Per fare questo, seguire il seguente procedimento:
	1. Annotare il percorso del progetto dame-android, ad esempio ~/dame/dame-android se il
	   il progetto parent Ã¨ stato stato scompattato nella propria home.
	2. Spostarsi nella directory tools della proria SDK Android, ad esempio
	   /opt/android-sdk/tools.
	3. Eseguire da terminale il comando:
		$ ./android update project -p <dame-android-path>
	   Sostituendo <dame-android-path> con il percorso annotato al punto 1.
Questo permette di generare il file local.properties nella root di dame-android che contiene
il percorso dell'SDK.

3. USAGE

In the releases directory there is the archive that contains the last DAME release.
Unpack the archive where you want.

If you want to execute DAME, you must lunch the dame script.

DAME provides a command line interface:
	$ dame [options...] FILE.apk
It needs only the FILE.apk parameter that refers to the APK on which you want to use DAME.


3.1 OPTIONS

The following list shows various options that is allowed by DAME.
(If you execute the dame script without parameters, it is show on the screen)

 -ag (--androguard) VAL          : androguard path (~/tools/androguard/ by
                                   default)
 -at (--apktool) VAL             : apktool path (./tools/apktool by default)
 -bt (--android-build-tools) VAL : Android build tools path (~/tools/android/and
                                   roid-sdk-linux_x86/build-tools/21.1.2/ by
                                   default)
 -c (--ftp-server-config) FILE   : ftp server file config (config.properties in
                                   the source apk path by default)
 -o (--output) VAL               : apk file dest path (out.apk in the source
                                   apk path by default)
 -py VAL                         : python path (system path by default)
 -v (--version)                  : Prints the engine version and build time.

The option -ag (or --androguard) suggests to the engine the Androguard installation directory.
If you don't suggest that option, it uses the default path ~/tools/androguard.
If the path is different and if you won't suggets the right path every time, you can make a 
symbolic link:
	$ ln -s <real-androguard-path> ~/tools/androguard
Could be required to replace ~ with your home path.

The option -at (or --apktool) suggests to the engine the apktool position. DAME is already 
equipped with a version of apktool that is used by default, but with this option you might 
use different one.

The option -bt (or --android-build-tools) suggests to the engine the Android build tools path.
It uses ~/tools/android/android-sdk-linux_x86/build-tools/21.1.2/ by default. If the path is 
different and if you won't suggest every time the right path, you can make a symbolic link 
like the -ag option.

The option -c (or --ftp-server-config) suggests to the engine the FTP server configuration file 
path that is used by the malicious application to download the payloads and to upload their 
execution outputs. By default, the engine looks for config.properties file in the same directory
of the source APK. In the section 3.2 is showed the configuration file structure.

The option -o (or --output) suggests to the engine where it has to save the malicious APK.
The engine writes in output the file out.apk in the same directory of the source APK by default,
if a file with that name already exists, it is overwritten.

The option -py suggests to the engine where it has to look for python interpreter.
It is searched in system path by default.

In the end the option -v (or --version) show the engine version and build date.
It can be used without the source APK parameter.

When you execute dame with right options and parameters, the engine analyzes the source APK 
and suggests a set of payloads that is allowed to inject. Every suggested payload uses one 
or more permission already used in the application. You can choose which payloads the engine 
has to inject pointing out the showed indexes separated by coma.
When the execution ends you obtain the modified APK already signed and optimized that can be 
installed on a device.

3.2 CONFIGURAZIONE SERVER FTP

The malicious app doesn't include the choosen payloads but only calls to them. On the first 
time the app uses internet rightly, the modified app downloads the payloads while every time 
next it uploads the execution outputs. You must specify the URL addresses to download the 
payloads and to upload the output. You must specify this informations in a file that you must
suggest to the engine by the option -c (or --ftp-server-config). 

The server configuration file must be formed as follow:

	server=<server ftp address with schema and port number, if it isn't 21>
	payload_uri=<relative path from the root that point out to payload jar>
	result_uri=<relative path from the root that point out to the directory where you want to save the outputs>
	username=<login username>
	password=<login password>
	passive_mode=<true if you want to use passive mode, false otherwise>

Ad esempio, si potrebbe avere

	server=ftp://10.0.2.2
	payload_uri=/DAME/payloads.jar
	result_uri=/DAME/results/
	username=userftp
	password=srss2015
	passive_mode=false

Nell'esempio il server utilizza la porta 21 di default. Se la porta Ã¨ diversa bisogna indicare,
ad esempio,

	server=ftp://10.0.2.2:1234

Il jar dei payload Ã¨ conenuto nella cartella payloads-jar della release. Ãˆ necessario copiare
questo file sul proprio server FTP nella posizione indicata nel file di configurazione.
Assicurarsi, inoltre che il proprio server FTP abbia la directory indicata in result_uri accessibile
in scrittura e che il file indicato in payload_uri sia accessibile in lettura.

3.3 PAYLOADS

I payload sono le unitÃ  di codice malevolo che vengono caricate dinamicamente a run-time dall'app
malicious. I payload utilizzano dei permessi che devono essere giÃ  presenti ed utilizzati nell'app
trusted, e possono essere eseguiti solo una volta (alla prima chiamata) o ad ogni chiamata.

Nell'ultima release, DAME ha integrati i seguenti payload:

	* CallsLog
	Questo payload permette di ottenere la lista delle chiamate effettuate. Viene eseguito
	ogni volta che viene chiamato.

	* IMEI
	Questo payload permette di ottenere l'IMEI del dispositivo in cui Ã¨ eseguito.
	Viene eseguito una sola volta alla prima chiamata.
	
	* Networks
	Questo payload permette di ottenere la lista delle reti salvate. Viene eseguito ogni
	volta che viene chiamato.
	
	* ReadContacts
	Questo payload permette di ottenere la lista dei contatti. Viene eseguito una sola volta
	alla prima chiamata (per motivi prestazionali).
	
	* SMSInbox
	Questo payload permette di ottenere la lista degli SMS salvati nel dispositivo. Viene
	eseguito solo alla prima chiamata (per motivi prestazionali).

Per sviluppare altri payload, seguire la sezione di sviluppo, dopo essersi assicurati di aver
soddisfatto i prerequisiti.

3.4 OUTPUT

Gli output dell'esecuzione dei payload vengono caricati nella directory indicata del server FTP.
La nomenclatura segue la seguente sintassi:

	<Nome-del-payload>-<date>-<time>.txt

In cui
	* <Nome-del-payload> Ã¨ l'identificativo del payload, ad esempio IMEI o SMSInbox;
	* <date> Ã¨ la data nel formato yyyyMMdd, ad esempio 20150217 per indicare il
	  17 febbraio 2015;
	* <time> Ã¨ l'ora comprensiva di millisecondi nel formato HHmmssSSSS, ad esempio
	  152645874 indica le ore 15:26:45.874
	  

4. SVILUPPO

Prima di leggere questa sezione, bisogna seguire le istruzioni della sezione 2.2.

Il progetto DAME utilizza Maven come sistema di gestione delle dipendenze e installazione.

DAME Ã¨ composto da due sotto-progetti: dame-engine e dame-android.
Il primo contiene la logica di DAME per quanto riguarda la modifica dell'APK sorgente e la
generazione dell'APK malicious.
Il secondo, da cui dipende il primo, contiene le classi e i servizi per Android che vengono
iniettati nell'APK.
dame-engine utilizza dame-android per la generazione del codice smali utilizzato per l'iniezione.


4.1 SCRITTURA PAYLOAD

Oltre ai payload forniti di default, Ã¨ possibile, nel progetto dame-android, svilupparne altri
seguento le seguenti regole.

	1. Per ogni payload creare un sotto-package di it.unisannio.srss.dame.android.payloads
	2. Nel package creato nel punto 1, creare una classe che estenda
			it.unisannio.srss.dame.android.payloads.Payload
	3. Nella classe creata nel punto 2, implementare due costruttori:
		3.1 Il primo, senza argomenti che chiama semplicemente il super(), Ã¨ utilizzato
			dall'engine per l'enumerazione dei payload;
		3.2 Il secondo deve avere come parametro un oggetto di tipo
				android.content.Context
			che deve passare alla super classe.
	4. Implementare il metodo
			public synchronized void run();
	   in cui inserire la logica del payload, eventualmente utilizzando l'oggetto Context
	   ottenibile dalla super classe.
	5. Per salvare l'output del payload utilizzare il metodo save(String) della super-classe.

I servizi Android iniettati dall'engine si occupano di chiamare il metodo run() nel momento piÃ¹
opportuno, oltre a fornire la logica di salvataggio degli output.

Ad esempio, se si vuole realizzare un payload con nome MyPayload, si avrebbe:

	package it.unisannio.srss.dame.android.payloads.mypayload;
	
	import it.unisannio.srss.dame.android.payloads.Payload;
	import android.content.Context;
	
	public class MyPayload extends Payload {
		
		public MyPayload() {
			super();
		}
		
		public MyPayload(Context context) {
			super(context);
		}
		
		// @Override
		public synchronized void run() {
			// logica del payload
			// utilizzare this.context all'occorrenza
			// utilizzare save(String) per salvare l'output
		}
	}

Per ogni payload, va specificato un file di configurazione che deve avere come nome payload.properties
e deve trovarsi necessariamente nello stesso package della classe che estende Payload.
Tale file deve contenere i seguenti campi:

	# whatever (required, must be unique)
	name=<nome-del-payload>
	# whatever (not required)
	description=<descrizione>
	# comma separated permissions (not required)
	permissions=<permesso[,permesso...]>
	# once or always. If missing, assumes once
	execution=<once-or-always>

Il nome del payload deve essere univoco, tutti gli altri campi possono anche essere omessi.
Nel campo permissions, bisogna inserire tutti i permessi richiesti dal payload, separati
da virgola. Non Ã¨ necessario il prefisso android.permission per i permessi.
Il campo execution, se impostato ad once, fa sÃ¬ che il payload venga eseguito una sola volta.
Se si usa always, invece, il payload puÃ² essere eseguito piÃ¹ di una volta.

Per il payload di esempio visto prima, si potrebbe avere come configurazione:

	name=MyPayload
	description=This payload does nothing
	permissions=READ_CONTACTS
	execution=once

4.2 BINARY BUILDING

To compile and to build binary files, you must follow this process:
	1. Open terminl and move to parent project root directory.
	2. Execute the command
		$ mvn clean install

When this process ends, you can find in dame-engine/dist directory all you need to execute DAME.
At the same time, in the release directory a tar.gz file is created that is named according to
project version defined in the pom file. The archive contains everything is contained in dame-engine/dist.